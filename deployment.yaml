apiVersion: apps/v1
kind: Deployment
metadata:
  name: ray-new-site-deployment
  labels:
    app: ray-new-site
spec:
  replicas: 1 # Or your desired number of replicas
  selector:
    matchLabels:
      app: ray-new-site
  strategy: # Add a strategy for rolling updates
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0 # Max number of pods that can be unavailable during the update
      maxSurge: 1
  template:
    metadata:
      labels:
        app: ray-new-site
    spec:
      containers:
      - name: ray-new-site-container
        image: "southamerica-east1-docker.pkg.dev/prod1-svc-lzjf/ray-new-site/FRONTEND_IMAGE"
        imagePullPolicy: Always
        ports:
        - containerPort:  3000
        # Add resource requests and limits (good practice)
        # ADDED ENVIRONMENT VARIABLES HERE
        env:
        - name: ZAPIER_WA_MODAL_WEBHOOK_URL
          value: <ZAPIER_WA_MODAL_WEBHOOK_URL>
        - name: ZAPIER_WEBHOOK_URL
          value: <ZAPIER_WEBHOOK_URL>
        - name: INTERNAL_AUTH_PASSWORD
          value: <INTERNAL_AUTH_PASSWORD>
        - name: INTERNAL_AUTH_USER
          value: <INTERNAL_AUTH_USER>
        - name: N8N_REDEEM_WEBHOOK_URL
          value: <N8N_REDEEM_WEBHOOK_URL>
        - name: N8N_REDEEM_WEBHOOK_URL
          value: <N8N_REDEEM_WEBHOOK_URL>
        - name: N8N_WEBHOOK_URL
          value: <N8N_WEBHOOK_URL>

        resources:
          requests:
            cpu: "500m"
            memory: "1024Mi"
          limits:
            cpu: "1000m"
            memory: "2048Mi"
        readinessProbe: # <--- ADDED THIS SECTION
          httpGet:
            path: /es # The endpoint your Spring app exposes for health checks
            port: 3000    # The port your container listens on
          initialDelaySeconds: 10 # Initial delay before readiness checks begin
          periodSeconds: 5      # How often to perform the check
          timeoutSeconds: 3     # How long to wait for a response
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  annotations:
  name: ray-new-sitesvc
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app: ray-new-site
  sessionAffinity: None
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: ray-new-site.rayapp.io-route

spec:
  parentRefs:
  - name: prod-gateway
  hostnames:
  - rayapp.io
  - www.rayapp.io
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    backendRefs:
    - name: ray-new-sitesvc
      port: 80
---
apiVersion: networking.gke.io/v1
kind: HealthCheckPolicy
metadata:
  name: ray-net-site-healthcheck
spec:
  default:
    checkIntervalSec: 10
    timeoutSec: 5
    healthyThreshold: 1
    unhealthyThreshold: 3
    logConfig:
      enabled: true
    config:
      type: HTTP
      httpHealthCheck:
        portSpecification: USE_FIXED_PORT
        port: 3000
        requestPath: /es
  targetRef:
    group: ""
    kind: Service
    name: ray-new-sitesvc
---
apiVersion: networking.gke.io/v1
kind: GCPBackendPolicy
metadata:
  name: ray-new-site-policy
spec:
  default:
    timeoutSec: 300
  targetRef:
    group: ""
    kind: Service
    name: ray-new-sitesvc
